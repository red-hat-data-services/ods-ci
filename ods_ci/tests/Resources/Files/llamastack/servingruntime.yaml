apiVersion: serving.kserve.io/v1alpha1
kind: ServingRuntime
metadata:
  annotations:
    opendatahub.io/template-name: vllm-cuda-runtime
    opendatahub.io/serving-runtime-scope: global
    opendatahub.io/runtime-version: v0.10.0.2
    opendatahub.io/accelerator-name: migrated-gpu
    openshift.io/display-name: llama-32-3b-instruct
    opendatahub.io/template-display-name: vLLM NVIDIA GPU ServingRuntime for KServe
    opendatahub.io/recommended-accelerators: '["nvidia.com/gpu"]'
    opendatahub.io/apiProtocol: REST
  name: llama-32-3b-instruct
  namespace: llamastack
  labels:
    opendatahub.io/dashboard: 'true'
spec:
  annotations:
    prometheus.io/path: /metrics
    prometheus.io/port: '8080'
    prometheus.io/scrape: "true"
  containers:
    - args:
        - '--port=8080'
        - '--model=/mnt/models'
        - '--served-model-name=llama-3-2-3b-instruct'
        - '--tensor-parallel-size=1'
        - '--max-model-len=2048'
        - '--dtype=half'
        - '--gpu-memory-utilization=0.95'
      command:
        - python
        - '-m'
        - vllm.entrypoints.openai.api_server
      env:
        - name: HF_HOME
          value: /tmp/hf_home
        - name: VLLM_LOGGING_LEVEL
          value: DEBUG
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
      image: 'quay.io/modh/vllm@sha256:db766445a1e3455e1bf7d16b008f8946fcbe9f277377af7abb81ae358805e7e2'
      name: kserve-container
      ports:
        - containerPort: 8080
          protocol: TCP
      volumeMounts:
        - mountPath: /dev/shm
          name: shm
      resources:
        requests:
          cpu: "2"
          memory: 8Gi
          nvidia.com/gpu: 1
        limits:
          cpu: "4"
          memory: 16Gi
          nvidia.com/gpu: 1
      securityContext:
        allowPrivilegeEscalation: false
        runAsNonRoot: true
  multiModel: false
  supportedModelFormats:
    - autoSelect: true
      name: vLLM
  volumes:
    - emptyDir:
        medium: Memory
        sizeLimit: 2Gi
      name: shm