[tool.poetry]
name = "ods-ci"
version = "0.1.0"
description = "Robot Framework test suites for Red Hat OpenShift Data Science"
authors = ["RHODS QE <ods-qe@redhat.com>"]
readme = "README.md"
packages = [{include = "ods_ci"}]

# https://python-poetry.org/docs/dependency-specification
[tool.poetry.dependencies]
python = ">=3.11.5, <3.12.0"
reportportal-client = "^5.2.5"
robotframework = "^6"
robotframework-debuglibrary = ">=2.0.0"
robotframework-requests = "^0.9.4"
robotframework-dependencylibrary = "^4.0.1"
robotframework-seleniumlibrary = "^6.1.1"
# Selenium has been releasing versions prone to breaking, let's pin to a single release
selenium = "4.13.0"
robotframework-jupyterlibrary = "^0.4.0"
robotframework-openshift = {git = "https://git@github.com/red-hat-data-services/robotframework-openshift.git"}
pytest = "^7.2.1"
pytest-logger = "^0.5.1"
Pygments = "^2.14.0"
requests = "^2.28.2"
escapism = "^1.0.1"
semver = "^2"
rpaframework = "^27.2.0"
pexpect = "^4.8.0"
python-openstackclient = "^6.2.0"
awscli = "^1.27.100"
kfp = "==2.7.0"
pyyaml = "^6.0.1"
junitparser = "3.1.2"
python-terraform = "0.10.1"
fuzzywuzzy = "^0.18.0"
python-levenshtein = "^0.25.1"

[tool.poetry.group.dev.dependencies]
robotframework-lsp = ">=1.11.0"
robotframework-robocop = "^4.1.0"
robotframework-tidy = "^4.5.0"
ruff = "0.3.4"
pyright = "1.1.356"
pre-commit = "3.7.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# https://microsoft.github.io/pyright/#/configuration
[tool.pyright]
typeCheckingMode = "off"
reportMissingImports = "error"
reportUnboundVariable = "error"
reportGeneralTypeIssues = "error"
reportUnnecessaryTypeIgnoreComment = "error"
reportPossiblyUnboundVariable = "warning"
reportOptionalMemberAccess = "none"
reportOptionalSubscript = "none"
include = ["ods_ci/"]
ignore = [
  "ods_ci/tests/Resources/Files/pipeline-samples/",
]
pythonVersion = "3.11"
pythonPlatform = "Linux"

# https://docs.astral.sh/ruff/configuration
[tool.ruff]
include = ["pyproject.toml", "ods_ci/**/*.py"]
exclude = ["ods_ci/tests/Resources/Files/pipeline-samples/"]
target-version = "py311"
line-length = 120

# https://docs.astral.sh/ruff/rules
[tool.ruff.lint]
preview = true
select = [
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "COM", # flake8-commas
  "E", "W", # pycodestyle errors/warnings
  "F", # Pyflakes
  "FA", # flake8-future-annotations
  "FLY", # flynt
  "G", # flake8-logging-format
  "I", # isort
  "INP", # flake8-no-pep420
  "INT", # flake8-gettext
  "ISC", # flake8-implicit-str-concat
  "ISC", # implicit string concatenation
  "N", # pep8-naming
  "NPY002", # numpy-legacy-random
  "PERF", # Perflint
  "PGH", # pygrep-hooks
  "PIE", # misc lints
  "PL", # pylint
  "PL", # pylint
  "PYI", # flake8-pyi
  "Q", # flake8-quotes
  "RET", # flake8-return
  "RUF", # Ruff-specific
  "S102", # flake8-bandit: exec-builtin
  "T10", # flake8-debugger
  "TCH", # type-checking imports
  "TID", # flake8-tidy-imports
  "UP", # pyupgrade
  "YTT", # flake8-2020
]
ignore = [
 # intentionally disabled
  "E203", # space before : (needed for how black formats slicing)
  "ISC001", # single-line-implicit-string-concatenation (ruff format wants this disabled)
 # various limits and unimportant warnings
  "E501", # Line too long
  "E741", # Ambiguous variable name: `l`
  "PLR0904", # Too many public methods (56 > 20)
  "PLR0912", # Too many branches
  "PLR0913", # Too many arguments in function definition (6 > 5)
  "PLR0915", # Too many statements
  "PLR0917", # Too many positional arguments (10/5)
  "PLR0917", # Too many positional arguments (7/5)
  "PLR2004", # Magic value used in comparison
  # "W503", # not yet implemented; line break before binary operator
  # "W504", # not yet implemented; line break after binary operator
 # TODO
  "B006", # Do not use mutable data structures for argument defaults
  "COM812", # Trailing comma missing
  "INP001", # File `ods_ci/tests/Resources/Page/ODH/JupyterHub/jupyter-helper.py` is part of an implicit namespace package. Add an `__init__.py`.
  "N806", # Variable `outputText` in function should be lowercase
  "N813", # Camelcase `ElementTree` imported as lowercase `et`
  "N816", # Variable `rotatingHandler` in global scope should not be mixedCase
  "N999", # Invalid module name: 'createPolarionTestRun'
  "PERF401", # Use a list comprehension to create a transformed list
  "PLC1901", # `filter_value != ""` can be simplified to `filter_value` as an empty string is falsey
  "PLR6201", # Use a `set` literal when testing for membership
  "PLR6301", # Method `_render_template` could be a function, class method, or static method
  "PLW1514", # `codecs.open` in text mode without explicit `encoding` argument
  "PLW2901", # `for` loop variable `tag_it` overwritten by assignment target
  "RET501", # Do not explicitly `return None` in function if it is the only possible return value
  "RET504", # Unnecessary assignment to `names` before `return` statement
  "RET505", # Unnecessary `else` after `return` statement
  "UP015", # Unnecessary open mode parameters
  "UP031", # format specifiers instead of percent format
  "UP032", # Use f-string instead of `format` call
  "UP034", # Avoid extraneous parentheses
 # TODO(jdanek)
  "F405", # `IsNotFlagged` may be undefined, or defined from star imports
  "RET507", # Unnecessary `else` after `continue` statement
  "RET508", # Unnecessary `elif` after `break` statement
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# https://docs.astral.sh/ruff/formatter
[tool.ruff.format]
line-ending = "lf"
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.pytest.ini_options]
addopts = "-rfEX -p doctest --doctest-modules --strict-markers --import-mode=importlib"
python_files = ["test_*.py"]
python_classes = ["Test"]
python_functions = ["test"]
testpaths = ["ods_ci/selftests/"]
xfail_strict = true
markers = [
    "slow",
]
